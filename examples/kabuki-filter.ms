;;; This script was designed to filter log files generated by a Kabuki
;;; session, scrubbing out details that don't belong in a public session
;;; log.

(define (kabuki-filter lines)
  (define in (make-tc lines))
  (define out (make-tc))

  (define line #f)

  (define (next) (set! line (tc-next! in)))
  (define (keep) 
    (write "    Keeping:")(write line)(newline)
    (tc-append! out line))
  (define (drop)
    (write "    Dropping:")(write line)(newline))

  (until (tc-empty? in)
    (next)    
    (cond
      ;;; All lines containing "rolls jags" are dropped
      ((string-find line " rolls jags: ")
       (drop))
    
      ;;; All lines containing "rolls d20" are dropped
      ((string-find line " rolls d20: ")
       (drop))

      ;;; All lines containing "whispers to" are dropped
      ((string-find line " whispers to ")
       (drop))

      ;;; All IC lines must be kept, and start with " --"
      ((string-begins-with? line " --") 
       (keep))

      ;;; All OOC lines must be dropped, and start with " ::"
      ((string-begins-with? line " ::") 
       (drop))

      ;;; All remaining lines must be Systems which start with
      ;;; **, or are command feedback.
      ((not (string-begins-with? line " **")) 
       (drop))

      ;;; All system arrival commands should be kept.
      ((string-find line "has arrived in")
       (keep))

      ;;; All other system lines shall be dropped.
      (else (drop))))

  (tc->list out))

(define (kabuki-filter-file src-path dst-path)
  (write "  Opening ")(write src-path)(write "..")(newline)
  (define src-file (open-input-file src-path))

  (write "  Reading ")(write src-path)(write "..")(newline)
  (define src-lines (read-lines src-file))
  (close src-file)

  (write "  Filtering log..")(newline)
  (define dst-lines (kabuki-filter src-lines))

  (write "  Opening ")(write dst-path)(write "..")(newline)
  (define dst-file (open-output-file dst-path))

  (write "  Writing log to ")(write dst-path)(write "..")(newline)
  (write (apply string-join *line-sep* dst-lines)
         dst-file)
  (close dst-file)

  (write "Done."))

(define (usage)
  (write "kabuki-filter <src-file> <dst-file>")
  (newline)
  (write "filters a Kabuki session log to remove OOC and system cruft that is not")
  (newline)
  (write "worth sharing in a public log.")
  (newline)
  (newline)
  (write "Do not use kabuki-filter on the master copy of your log file."))

(define (main)
  (define args (argv))
  (case (length args)
    ((3) (kabuki-filter-file (argv 1) (argv 2)))
    (else (usage))))

(main)
;;; MOSVM2
;;; MOSVM2
